name: Create Issues on Organization Repositories

on:
  workflow_call:
    inputs:
      parent_issue_title:
        type: string
      parent_issue_body:
        type: string
      child_issue_title:
        type: string
      child_issue_body:
        type: string
      get_repos_inactive_for_months:
        description: "指定された月数以上更新されていないリポジトリのみを対象とする（0 に設定するとすべてのリポジトリが対象となる）"
        required: false
        type: string
        default: "0"
      dry_run:
        description: "true の場合は対象リポジトリを表示して終了する"
        required: false
        type: string
        default: true
      excluded_repos:
        description: "条件によらず処理対象から除外するリポジトリのリスト"
        required: false
        type: string
        default: "[]"

    secrets:
      PRIVATE_KEY_ISSUE_CREATOR:
        description: "a private key of GitHub App with permissions to complete this workflow"
        required: true

jobs:
  construct_target_repos:
    runs-on: ubuntu-latest
    outputs:
      has_old_repos: ${{ steps.construct_target_repos.outputs.has_old_repos }}
      old_repos: ${{ steps.construct_target_repos.outputs.old_repos }}
      current_year: ${{ env.current_year }}
      current_quarter: ${{ env.current_quarter }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install requests

      - name: Generate installation token of GitHub App
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID_ISSUE_CREATOR }}
          private-key: ${{ secrets.PRIVATE_KEY_ISSUE_CREATOR }}
          owner: ${{ github.repository_owner }}

      - name: Set date variable
        id: date
        run: |
          echo "month_ago=$(date -d "-${{ env.get_repos_inactive_for_months }} month" --utc +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "current_year=$(date +'%Y')" >> $GITHUB_ENV
          echo "current_quarter=$((($(date +%m)-1)/3+1))Q" >> $GITHUB_ENV

      - name: Query all repositories under organization
        id: query_repo
        run: |
          pip install requests
          python3 - <<EOF
          import sys
          import requests
          import json
          import os

          def run_query(query, variables, headers):
              response = requests.post("https://api.github.com/graphql", data=json.dumps({"query": query, "variables": variables}), headers=headers)
              if response.status_code == 200:
                  return response.json()
              else:
                  raise Exception(f"Query failed to run by returning code of {response.status_code}. {query}")

          token = "${{ steps.generate_token.outputs.token }}"
          org = "${{ github.repository_owner }}"

          query = """
          query(\$org: String!, \$cursor: String) {
            organization(login: \$org) {
              repositories(first: 100, after: \$cursor, orderBy: {field: UPDATED_AT, direction: ASC}) {
                nodes {
                  name
                  updatedAt
                }
                pageInfo {
                  endCursor
                  hasNextPage
                }
              }
            }
          }
          """
          headers = {"Authorization": f"Bearer {token}"}
          variables = {"org": org, "cursor": None}
          has_next_page = True
          all_repos = []

          while has_next_page:
              result = run_query(query, variables, headers)
              repos = result["data"]["organization"]["repositories"]["nodes"]
              all_repos.extend(repos)
              print(all_repos)
              has_next_page = result["data"]["organization"]["repositories"]["pageInfo"]["hasNextPage"]
              variables["cursor"] = result["data"]["organization"]["repositories"]["pageInfo"]["endCursor"]

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"data={all_repos}\n")
          EOF

      - name: Query all teams under organization
        id: query_teams
        run: |
          pip install requests
          python3 - <<EOF
          import sys
          import requests
          import json
          import os

          def run_query(query, variables, headers):
              response = requests.post("https://api.github.com/graphql", data=json.dumps({"query": query, "variables": variables}), headers=headers)
              if response.status_code == 200:
                  return response.json()
              else:
                  raise Exception(f"Query failed to run by returning code of {response.status_code}. {query}")

          token = "${{ steps.generate_token.outputs.token }}"
          org = "${{ github.repository_owner }}"

          query = """
          query(\$org: String!, \$cursor: String) {
            organization(login: \$org) {
              teams(first: 100, after: \$cursor) {
                edges {
                  node {
                    slug
                    name
                    repositories(first: 100) {
                      edges {
                        node {
                          name
                        }
                        permission
                      }
                      pageInfo {
                        endCursor
                        hasNextPage
                      }
                    }
                  }
                }
              }
            }
          }
          """
          headers = {"Authorization": f"Bearer {token}"}
          variables = {"org": org, "cursor": None}
          has_next_page = True
          all_teams = []

          while has_next_page:
              result = run_query(query, variables, headers)
              print(f"result: {result}")
              teams = result["data"]["organization"]["teams"]["enges"]["node"]
              all_teams.extend(teams)
              print(f"all_teams: {all_teams}")
              pageinfo = result["data"]["organization"]["teams"]["edges"]["node"]["repositories"]["pageInfo"]["hasNextPage"]
              print(f"page_info: {page_info}")
              has_next_page = pageinfo["hasNextPage"]
              variables["cursor"] = pageinfo["endCursor"]

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"data={all_teams}\n")
          EOF

      - name: Construct list of target repos
        id: construct_target_repos
        run: |
          echo "Extracting old repositories..."
          python3 - <<EOF
          import os
          from datetime import datetime, timedelta
          import json

          # Repositories response from query_repo step
          repos_nodes = ${{
            steps.query_repo.outputs.data
          }}

          # Teams response from query_teams step
          teams_response = ${{
            steps.query_teams.outputs.data
          }}
          teams_edges = teams_response["organization"]["teams"]["edges"]

          month_ago = datetime.strptime(os.getenv("month_ago"), "%Y-%m-%dT%H:%M:%SZ")

          # Build a map of teams and their repository permissions
          team_repo_permissions = {}
          for team in teams_edges:
            team_slug = team["node"]["slug"]
            for repo_edge in team["node"]["repositories"]["edges"]:
              repo_name = repo_edge["node"]["name"]
              permission = repo_edge["permission"]
              if permission == "ADMIN":
                if repo_name not in team_repo_permissions:
                  team_repo_permissions[repo_name] = []
                team_repo_permissions[repo_name].append(team_slug)

          # Filter old repositories and find admin teams
          excluded_repos = set(json.loads(os.getenv("EXCLUDED_REPOS")))
          old_repos = [
            {
              "name": repo["name"],
              "admin_teams": team_repo_permissions.get(repo["name"], [])
            }
            for repo in repos_nodes if datetime.strptime(repo["updatedAt"], "%Y-%m-%dT%H:%M:%SZ") < month_ago and repo["name"] not in excluded_repos
          ]

          if not old_repos:
              print(f"No repositories found that were updated more than {os.getenv("get_repos_inactive_for_months")} months ago.")
              with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                  fh.write(f"has_old_repos=false\n")

          old_repos_str = json.dumps(old_repos)
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"has_old_repos=true\n")
              fh.write(f"old_repos={old_repos_str}\n")
          EOF
        env:
          EXCLUDED_REPOS: ${{ inputs.excluded_repos }}

      - name: Show target repos on dry run
        if: ${{ inputs.dry_run == 'true' }}
        run: |
          echo "target repos: ${{ steps.construct_target_repos.outputs.old_repos}}"

  create_issues:
    runs-on: ubuntu-latest
    needs: construct_target_repos
    if: ${{ (needs.construct_target_repos.outputs.has_old_repos == 'true') && (inputs.dry_run == 'false') }}

    env:
      old_repos: ${{ needs.construct_target_repos.outputs.old_repos }}
      current_year: ${{ needs.construct_target_repos.outputs.current_year }}
      current_quarter: ${{ needs.construct_target_repos.outputs.current_quarter }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Generate installation token of GitHub App
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID_ISSUE_CREATOR }}
          private-key: ${{ secrets.PRIVATE_KEY_ISSUE_CREATOR }}
          owner: ${{ github.repository_owner }}

      - name: Get ID of target repos
        id: get_repo_id
        uses: octokit/graphql-action@v2.3.2
        with:
          query: |
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                id
              }
            }
          variables: |
            {
              "owner": ${{ github.repository_owner }},
              "name": ${{ github.event.repository.name }}
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}


      - name: Create parent issue
        id: create_parent_issue
        uses: octokit/graphql-action@v2.3.2
        with:
          query: |
            mutation($repoId: ID!, $title: String!, $body: String!) {
              createIssue(input: {repositoryId: $repoId, title: $title, body: $body}) {
                issue {
                  url
                  id
                }
              }
            }
          variables: |
            {
              "repoId": "${{ fromJSON(steps.get_repo_id.outputs.data).repository.id }}",
              "title": "${{ inputs.parent_issue_title }}",
              "body": "${{ inputs.parent_issue_body }}"
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Construct child issue data
        id: create_child_issue_data
        run: |
          echo "Creating child issue data..."
          python3 - <<EOF
          import os
          import json

          old_repos_str = os.getenv("old_repos")
          old_repos = json.loads(old_repos_str)
          print(old_repos_str)
          print(old_repos)

          get_repos_inactive_for_months = os.getenv("get_repos_inactive_for_months")
          my_org = os.getenv("my_org")
          current_year = os.getenv("current_year")
          current_quarter = os.getenv("current_quarter")
          year_quarter = f"[{current_year} {current_quarter} repo 棚卸し]"
          parent_issue_url = os.getenv("parent_issue_url")

          child_issue_data_list = []

          for repo in old_repos:
              repo_name = repo["name"]
              admin_teams = [f"{my_org}/{t}" for t in repo["admin_teams"]]
              admin_team_mentions = " ".join([f"@{t}" for t in admin_teams])
              issue_data = {"repo": f"{my_org}/{repo_name}", "admin_team_mentions": f"{admin_team_mentions}", "issue_title": os.getenv("child_issue_title"), "issue_body": os.getenv("child_issue_body")}
              child_issue_data_list.append(issue_data)

          child_issue_data_str = json.dumps(child_issue_data_list)
          print(child_issue_data_str)
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"child_issue_data={child_issue_data_str}\n")
          EOF
        env:
          my_org: ${{ github.repository_owner }}
          parent_issue_url: "${{ fromJSON(steps.create_parent_issue.outputs.data).createIssue.issue.url }}"
          child_issue_title: "${{ inputs.child_issue_title }}"
          child_issue_body: "${{ inputs.child_issue_body }}"

      - name: Create child issues
        id: create_child_issues
        run: |
          echo "Creating child issues..."
          echo "child_issue_urls<<EOF" >> $GITHUB_ENV

          issue_data='${{ steps.create_child_issue_data.outputs.child_issue_data }}'
          echo "issue_data ok"
          length=$(echo $issue_data | jq length)
          echo "length ok"

          for i in $(seq 0 $(($length - 1))); do
              owner_repo=$(echo $issue_data | jq -r .[$i].repo)
              issue_title=$(echo $issue_data | jq -r .[$i].issue_title)
              issue_body=$(echo $issue_data | jq -r .[$i].issue_body)
              echo "issue_body ok"
              admin_team_mentions=$(echo $issue_data | jq -r .[$i].admin_team_mentions)
              full_issue_body=$(echo -e "$issue_body\n$admin_team_mentions")
              echo "full_issue_body ok"

              issue_url=$(curl -L -X POST -H "Accept: application/vnd.github+json"  -H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/$owner_repo/issues -d "$(jq -nc --arg title "$issue_title" --arg body "$(echo "$full_issue_body" | sed 's/\\n/\n/g')" '{"title": $title, "body": $body}')" | jq -r ".html_url")

              if [ $? -ne 0 ]; then
                  echo "Failed to create issue for $owner_repo. Error: $issue_url"
                  exit 1
              fi
              echo $issue_url

              echo "- [ ] $issue_url\n" >> $GITHUB_ENV
          done

          echo EOF >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          parent_issue_url: "${{ fromJSON(steps.create_parent_issue.outputs.data).createIssue.issue.url }}"

      - name: Update parent issue description
        uses: octokit/graphql-action@v2.3.2
        with:
          query: |
            mutation ($id: ID!, $body: String!) {
              updateIssue(input: {id: $id, body: $body}) {
                issue {
                  body
                }
              }
            }
          variables: |
            {
              "id": "${{ fromJSON(steps.create_parent_issue.outputs.data).createIssue.issue.id }}",
              "body": "${{ inputs.parent_issue_body}}\n${{ env.child_issue_urls }}"
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
